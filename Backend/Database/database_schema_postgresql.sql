-- Enable pgcrypto extension for hashing
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- 1. Create Users Table
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Add index for email to speed up queries
CREATE INDEX idx_users_email ON users(email);

-- 2. Create Applications Table
DROP TABLE IF EXISTS applications CASCADE;
DROP TABLE IF EXISTS applications_application CASCADE;

CREATE TABLE applications_application (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    company_name VARCHAR(255) NOT NULL,
    position VARCHAR(200) NOT NULL,
    job_title VARCHAR(255) NOT NULL,
    job_description TEXT,
    notes TEXT,
    status VARCHAR(20) DEFAULT 'Pending' NOT NULL,
    date_applied DATE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES auth_user(id) ON DELETE CASCADE
);

-- Add indexes
CREATE INDEX idx_applications_status ON applications_application(status);
CREATE INDEX idx_applications_user ON applications_application(user_id);

-- Add trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_applications_updated_at
    BEFORE UPDATE ON applications_application
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- 3. Create Reminders Table
CREATE TABLE reminders (
    reminder_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    application_id INT,
    reminder_date TIMESTAMP NOT NULL,
    message TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (application_id) REFERENCES applications(application_id) ON DELETE CASCADE
);

-- 4. Create AI Insights Table
CREATE TABLE ai_insights (
    insight_id SERIAL PRIMARY KEY,
    application_id INT NOT NULL,
    trend_analysis TEXT,
    recommendations TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (application_id) REFERENCES applications(application_id) ON DELETE CASCADE
);

-- 5. Create Teams Table
DROP TABLE IF EXISTS tips CASCADE;
DROP TABLE IF EXISTS teams_teammember CASCADE;
DROP TABLE IF EXISTS teams_team CASCADE;

CREATE TABLE teams_team (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying(100) NOT NULL UNIQUE,
    created_by_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT teams_team_created_by_id_fkey 
        FOREIGN KEY (created_by_id) 
        REFERENCES auth_user(id) 
        ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED
);

-- Create indexes
CREATE INDEX teams_team_created_by_id_idx ON teams_team(created_by_id);
CREATE INDEX teams_team_name_c519f9ad_like ON teams_team(name varchar_pattern_ops);

-- Recreate teams_teammember table
CREATE TABLE teams_teammember (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    team_id bigint NOT NULL,
    user_id integer NOT NULL,
    role character varying(50) NOT NULL,
    joined_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT teams_teammember_team_id_fkey 
        FOREIGN KEY (team_id) 
        REFERENCES teams_team(id) 
        ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT teams_teammember_user_id_fkey 
        FOREIGN KEY (user_id) 
        REFERENCES auth_user(id) 
        ON DELETE CASCADE
        DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT teams_teammember_team_user_unique UNIQUE (team_id, user_id)
);

-- Create indexes for teams_teammember
CREATE INDEX teams_teammember_team_id_idx ON teams_teammember(team_id);
CREATE INDEX teams_teammember_user_id_idx ON teams_teammember(user_id);

-- 7. Create Tips Table
CREATE TABLE tips (
    id SERIAL PRIMARY KEY,
    team_id INTEGER NOT NULL,
    posted_by INTEGER NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    rating INTEGER DEFAULT 0,
    FOREIGN KEY (team_id) REFERENCES teams_team(id) ON DELETE CASCADE,
    FOREIGN KEY (posted_by) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Add indexes for better query performance
CREATE INDEX idx_tips_team ON tips(team_id);
CREATE INDEX idx_tips_posted_by ON tips(posted_by);
CREATE INDEX idx_tips_rating ON tips(rating);

-- 8. Insert Example Data with Password Hashing
INSERT INTO users (username, email, password_hash)
VALUES ('john_doe', 'john@example.com', crypt('password123', gen_salt('bf')));

-- 9. Verify Indexes (optional for debugging)
SELECT indexname, indexdef 
FROM pg_indexes 
WHERE tablename = 'users' OR tablename = 'teams_team';

-- 10. Verify Password Hashes (optional for debugging)
SELECT username, password_hash FROM users;

-- Rename columns to match our schema
ALTER TABLE applications_application 
    RENAME COLUMN company TO company_name;

ALTER TABLE applications_application 
    RENAME COLUMN date_applied TO applied_date;

-- Add missing column
ALTER TABLE applications_application 
    ADD COLUMN job_title VARCHAR(255);

-- Update column types and constraints
ALTER TABLE applications_application 
    ALTER COLUMN company_name TYPE VARCHAR(255),
    ALTER COLUMN status TYPE VARCHAR(20),
    ALTER COLUMN status SET DEFAULT 'Pending';

-- Update existing job_title values (if needed)
UPDATE applications_application 
SET job_title = 'Not Specified' 
WHERE job_title IS NULL;

-- Add NOT NULL constraint to job_title after setting default value
ALTER TABLE applications_application 
    ALTER COLUMN job_title SET NOT NULL;

-- Verify changes
\d applications_application

-- Run these commands in psql
ALTER TABLE teams_team RENAME COLUMN created_by TO created_by_id;
ALTER TABLE teams_team 
    DROP CONSTRAINT teams_team_created_by_fkey,
    ADD CONSTRAINT teams_team_created_by_id_fkey 
    FOREIGN KEY (created_by_id) REFERENCES auth_user(id) ON DELETE CASCADE;

-- Drop everything in the correct order
DROP TABLE IF EXISTS teams_teammember CASCADE;
DROP TABLE IF EXISTS teams_team CASCADE;
DROP INDEX IF EXISTS teams_team_name_c519f9ad_like;
DROP INDEX IF EXISTS teams_team_name_key1;

-- Add created_by_id column
ALTER TABLE teams_team 
    ADD COLUMN created_by_id integer NOT NULL DEFAULT 1;

-- Add index
CREATE INDEX teams_team_created_by_id_idx ON teams_team(created_by_id);

-- Create User Profile Table
CREATE TABLE user_profiles (
    profile_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL UNIQUE,
    current_title VARCHAR(255),
    years_experience INTEGER,
    industry VARCHAR(100),
    desired_role VARCHAR(255),
    desired_salary_range VARCHAR(50),
    location_preference VARCHAR(100),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Create Career Goals Table
CREATE TABLE career_goals (
    goal_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    goal_type VARCHAR(50) NOT NULL, -- e.g., 'short_term', 'long_term'
    description TEXT NOT NULL,
    target_date DATE,
    status VARCHAR(20) DEFAULT 'In Progress',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Create User Preferences Table
CREATE TABLE user_preferences (
    preference_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL UNIQUE,
    notification_frequency VARCHAR(20) DEFAULT 'daily',
    email_alerts BOOLEAN DEFAULT true,
    theme_preference VARCHAR(20) DEFAULT 'light',
    language_preference VARCHAR(10) DEFAULT 'en',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Create User Insights Table
CREATE TABLE user_insights (
    insight_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    insight_type VARCHAR(50) NOT NULL, -- e.g., 'career_path', 'skill_development'
    content TEXT NOT NULL,
    relevance_score DECIMAL(3,2),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Add indexes for better performance
CREATE INDEX idx_user_profiles_user_id ON user_profiles(user_id);
CREATE INDEX idx_career_goals_user_id ON career_goals(user_id);
CREATE INDEX idx_user_insights_user_id ON user_insights(user_id);
CREATE INDEX idx_career_goals_status ON career_goals(status);
CREATE INDEX idx_user_insights_type ON user_insights(insight_type);

-- Add updated_at triggers for tables that need it
CREATE TRIGGER update_user_profiles_updated_at
    BEFORE UPDATE ON user_profiles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_career_goals_updated_at
    BEFORE UPDATE ON career_goals
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_preferences_updated_at
    BEFORE UPDATE ON user_preferences
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

